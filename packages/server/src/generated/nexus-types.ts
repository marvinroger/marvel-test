/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from '../context'

declare global {
  type NexusGen = NexusGenTypes
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  AllCharacters: {
    // root type
    nodes: NexusGenRootTypes['Character'][] // [Character!]!
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  Character: {
    // root type
    name: string // String!
    pictureUrl: string // String!
  }
  PageInfo: {
    // root type
    currentPage: number // Int!
    pageCount: number // Int!
    resultsPerPage: number // Int!
    totalResults: number // Int!
  }
  Query: {}
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export type NexusGenAllTypes = NexusGenRootTypes

export interface NexusGenFieldTypes {
  AllCharacters: {
    // field return type
    nodes: NexusGenRootTypes['Character'][] // [Character!]!
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  Character: {
    // field return type
    name: string // String!
    pictureUrl: string // String!
  }
  PageInfo: {
    // field return type
    currentPage: number // Int!
    pageCount: number // Int!
    resultsPerPage: number // Int!
    totalResults: number // Int!
  }
  Query: {
    // field return type
    allCharacters: NexusGenRootTypes['AllCharacters'] // AllCharacters!
  }
}

export interface NexusGenArgTypes {
  Query: {
    allCharacters: {
      // args
      page?: number | null // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | 'AllCharacters'
  | 'Character'
  | 'PageInfo'
  | 'Query'

export type NexusGenInputNames = never

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: ctx.Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
